{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.6.0;\
//import './OrgIDStorage.sol';\
import './OnlyOwner.sol';\
\
\
\
contract SPBase is OnlyOwner \{\
   \
    struct Request\{\
        bytes32 uri;\
        bytes32 Info;\
        address subject;\
        \
    \}\
    \
    struct Provider\{\
       bytes32 uri;\
       bool exist ;\
    \}\
    \
    uint numCsps;\
   \
    mapping(uint256 => Request) ReqList;\
    mapping (address => Provider) Providers;\
    event AddReqinfo(address subject,uint256 ReqID);\
    constructor() public \{\
        \
    \}\
    \
    function upsert(bytes32 uri, bool atoken) public onlyOwner \{\
        \
        Providers[msg.sender] = Provider(uri,atoken);\
    \}\
    \
    //Old Function\
    // function getSPURI(address spaddr) public view returns (bytes32, address ) \{   //step 1 in scheme SSO verification\
    //     require(SPdb[spaddr].exist == true, "Address not found");\
    //     bytes32 uri = SPdb[spaddr].uri;\
    //     returns (uri,spaddr);\
    // \}\
    //New Function\
    function getProURI(address subject) public view returns (bytes32 ) \{  //Step 1 in Scheme\
        require(exist(subject), "Provider does not exist");\
        return (Providers[subject].uri);\
    \}\
    function exist(address subject) public view returns (bool)\{\
        return Providers[subject].exist;\
    \}\
    \
    function addNewReq(bytes32 Req,bytes32 uri,address subject ) public onlyOwner returns(uint256) \{  //step 2 ...uri retreived from Step 1\
        //require(db.exist(getOrgID(subject)), "OrgID does not exist");\
        uint256 ReqID=numCsps++;\
        ReqList[ReqID]=Request(uri,Req,subject);\
        emit AddReqinfo(subject,ReqID); \
        return ReqID;\
    \}\
    \
    \
    \
    // function accessRequest(address useraddr, bytes  memory uri,bytes20  internalID) public returns(bytes32) \{\
        \
    // //   bytes20  internalID=decodeInternalKey(getOrgID(useraddr));\
    // //   require(db.exist(internalID), "OrgID does not exist");\
    \
    //   bytes32 hash= keccak256(abi.encodePacked(uri));\
    //   //SPAccessdb[internalID] = SPAccess(useraddr,uri, hash);\
    //   return hash;\
    // \}\
    // function exist (uint256 ASQId) public view returns(bool) \{\
    //     return Providers[].exist;\
    // \}\
    \
    //take userproof_enJWT and decrpt with with SK (public key of service provider) and extract r from JWT  (offline process), \
    //send JWT in this function to match with existing JWT;\
    // add random phrase hash both JWT and random Phrase \
    \
    \
    \
    \
    // function verifyUserClaim(uint256 ASQId, bytes memory userproof_enJWT, address subject, bytes randomphrase) \
    // public onlyOwner returns (bool)\{\
     \
    //       require(exist(ASQId), "Link not found or expired");\
    //       (,,, bytes memory enJWT) = SPAccessdb[ASQId];\
    //       if(keccak256(userproof_enJWT) == keccak256(enJWT))\{\
              \
    //           return true;\
    //       \}\
    //       return false;\
    // \}\
    \
    // function ASQrequest(address subject, bytes memory req) public onlyOwner  \{\
        \
        \
    // \}\
\}\
     \
}