{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15260\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.0 <0.7.0;\
import './OnlyOwner.sol';\
\
contract AuthID is OnlyOwner \{\
\
//address  userAddress;\
address  OracleAddress;\
//string  oracleProof;\
//string  userProof;\
\
// struct token \{\
//     bytes32 hash;\
//     address user;\
//     address oracle;\
//     bool exist;\
//     bytes  uproof;\
//     bytes  oproof;\
//     uint256 r;  //random number\
// \}\
\
    struct UserLog \{\
     uint256 reqID;\
     bytes32 proof;\
     bool exist;\
     address subject;\
    \}\
    struct OracleLog\{\
        uint256 logId;\
        bytes32 proof;\
    \}\
    uint256 logidcount=0;\
\
   \
    mapping  (uint256 => UserLog) UserReqLog;\
    mapping (address => OracleLog) OracleReqLog;\
    event userproofadded(uint256 rqId,uint256 UserlogId);\
    event Arlogrevoked(uint256 UserlogId);\
    event Oracleproofadded(uint256 UserlogId, uint256 ReqID);\
    \
// modifier onlyUser \{\
//     require(msg.sender==userAddress);   // add if user exist already in the system\
// _;\
// \}\
\
    modifier onlyOracle \{\
    require(msg.sender==OracleAddress);\
    _;\
    \}\
\
//event ProofAddedEvent(address addr);\
\
    constructor() public \{\
       OracleAddress=msg.sender;\
  // userAddress=_useraddress;\
    \}\
\
    //logId is taken from notification when userproof is added\
    //to check whether userproof exist\
    //if userproof exist already, oracle proof can be added \
    \
    function setOracleProof(uint256 logId, bytes32 _oracleProof) public onlyOracle \{\
         if(isUserProofSet(logId)) \{\
             \
             UserLog memory userproof = UserReqLog[logId];\
             uint256 reqid = userproof.reqID;\
             bytes32 hash=keccak256(abi.encodePacked(_oracleProof));\
             OracleReqLog[userproof.subject] = OracleLog(logId,hash);\
             emit Oracleproofadded(logId,reqid);\
        \}\
    \}\
    \
    function setUserProof(uint256 ReqID,bytes32 _userProof) public onlyOwner  \{   //it is step 3 of scheme\
     \
        //ReqID is the ServiceID given by SPBASE request generated for you \
        require(msg.sender ==  owner ,"no permission");\
        uint256 logid=logidcount++;\
        bytes32 hash= keccak256(abi.encodePacked(_userProof));\
        \
        //Request Id sent by Service Provider and Computed Proof\
        \
        UserReqLog[logid] = UserLog(ReqID,hash,true,msg.sender);    \
        emit userproofadded(ReqID,logid);    //step 4 of scheme where blockchain notifies that userproof is added and oracle proof can be added\
    \}\
    \
    function isUserProofSet(uint256 logid) public view returns(bool) \{\
        \
        UserLog memory logentry = UserReqLog[logid];\
        return logentry.exist;\
    \}\
    \
    function RevokeLogRequest(uint256 logid) public onlyOwner\{\
    //UserReqLog[logid] = ARLog(ReqID,hash,true,msg.sender);  \
    //User can revoke this request from log to avoid replay attack\
     UserLog memory logentry = UserReqLog[logid];\
     require(logentry.subject==msg.sender, "no permission");\
     UserReqLog[logid] = UserLog(logentry.reqID,logentry.proof,false,logentry.subject);  \
     emit Arlogrevoked(logid);\
  \}\
  \
   function compareProof(bytes32 oracleproof, uint256 logId) public view  returns(bool)\{\
       UserLog memory logentry = UserReqLog[logId];\
       \
       if(keccak256(abi.encodePacked(oracleproof))==logentry.proof)\{\
           return true;\
       \}\
       else\{\
       return false;\
       \}\
   \}\
   function verify(bytes32 servicecode) public view returns(bool)  \{\
 \
    // (string memory op, string memory up) = (tokendb[servicecode].oproof,tokendb[servicecode].uproof);\
    // if(bytes(op).length !=0 && keccak256(abi.encodePacked(op))==keccak256(abi.encodePacked(up)))\
    // \{\
    //      return true;\
    // \}\
    // else\
    // \{\
    //     return false;\
    // \}\
  \}\
\
// function expiretoken(bytes20 ud) public\{  //ud is address servicecode\
//     require(tokendb[ud].exist, "token does not exist");\
//     //(bytes32 hash, address user, address oracle,string memory uproof,string memory oproof) =(tokendb[ud].hash,tokendb[ud].user,tokendb[ud].oracle,tokendb[ud].uproof,tokendb[ud].oproof);\
//   // tokendb[ud]= token(hash,user,oracle,false,uproof,oproof);\
  \
// \}\
//return user account address\
// function getUserAddr() public view returns(address) \{\
//     return userAddress;\
//     \}\
//return Oracle address (other account address where contract is deployed)\
// function getOracleAddr() public view returns(address) \{\
//     return OracleAddress;\
//     \}\
\
\}}