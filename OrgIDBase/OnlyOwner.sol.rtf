{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.7.0;\
\
\
/**\
 * @title Ownable\
 * @dev The Ownable contract has an owner address, and provides basic authorization control\
 * functions, this simplifies the implementation of "user permissions".\
 */\
contract OnlyOwner \{\
  address public owner;\
\
\
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\
\
\
  /**\
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\
   * account.\
   */\
\
  constructor() public \{\
    owner = msg.sender;\
  \}\
\
  /**\
   * @dev Throws if called by any account other than the owner.\
   */\
  modifier onlyOwner() \{\
    require(msg.sender == owner);\
    _;\
  \}\
  /**\
   * @dev Allows the current owner to transfer control of the contract to a newOwner.\
   * @param newOwner The address to transfer ownership to.\
   */\
  /*@CTK transferOwnership\
    @post __reverted == false -> (msg.sender == owner -> __post.owner == newOwner)\
    @post (owner != msg.sender) -> (__reverted == true)\
    @post (newOwner == address(0)) -> (__reverted == true)\
   */\
  /* CertiK Smart Labelling, for more details visit: https://certik.org */\
  function transferOwnership(address newOwner) public onlyOwner \{\
    require(newOwner != address(0));\
    emit OwnershipTransferred(owner, newOwner);\
    owner = newOwner;\
  \}\
\
\}}