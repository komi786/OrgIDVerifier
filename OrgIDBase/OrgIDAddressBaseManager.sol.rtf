{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.6.0;\
\
import './OrgIDManager.sol';\
\
contract OrgIDAddressBaseManager is OrgIDManager \{\
\
    constructor(bytes memory _prefix, address _dbAddr,address _revokeAddr) OrgIDBase(_dbAddr,_revokeAddr, _prefix) \
   public \{\
         //you can set prefix accordingly\
    \}\
    function decodeInternalKey(bytes memory Orgid) public  view returns (bytes20) \{\
     \
        require(IsPrefix(Orgid), "Ohhh invalid Orgid");\
        bytes memory domainID = (slice(Orgid, db.getPrefix().length));\
        require(domainID.length == 42 && domainID[0] == '0' && domainID[1] == 'x', "Nope invalid OrgID"); //if it doesnot have prefix 0x its not \
        uint160 iaddr = 0;\
        uint160 b1;\
        uint160 b2;\
        for (uint i=2; i<2+2*20; i+=2) \{\
            iaddr *= 256;\
            b1 = uint8(domainID[i]);\
            b2 = uint8(domainID[i+1]);\
            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\
            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\
            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\
            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\
            iaddr += (b1*16+b2);\
        \}\
        return bytes20(iaddr);\
    \}\
\
    function IsPrefix(bytes memory OrgID) public view returns(bool)\{\
       return hasPrefix(OrgID, db.getPrefix());\
    \}\
    function registerOrgID(bytes32 h, bytes32 uri) public \{\
        //internalCreateOrgID(getOrgID(msg.sender), bytes20(msg.sender), msg.sender, h, uri); Old code\
        //getOrgID(msg.sender)  \
        internalCreateOrgID(getOrgID(msg.sender), decodeInternalKey(getOrgID(msg.sender)), msg.sender, h, uri); //new code\
    \}\
\
    function updateOrgID(bytes32 h, bytes32 uri) public \{\
       // internalUpdateOrgID(getOrgID(msg.sender), bytes20(msg.sender), msg.sender, h, uri);\
        //decodeInternalKey(getOrgID(msg.sender))\
        internalUpdateOrgID(getOrgID(msg.sender), decodeInternalKey(getOrgID(msg.sender)), msg.sender, h, uri);\
    \}\
\
    function deregisterOrgID() public \{\
        //internalDeleteOrgID(getOrgID(msg.sender), bytes20(msg.sender), msg.sender);\
        //decodeInternalKey(getOrgID(msg.sender))\
        internalDeleteOrgID(getOrgID(msg.sender), decodeInternalKey(getOrgID(msg.sender)), msg.sender);\
    \}\
    function insertOrgIDVC(address issuer,bytes memory hash, bytes32 uri) public \{\
        //function internalInsertVC(bytes20 internalKey, address OrgidOwner, address issuer, bytes32 metahash, bytes memory uri)\
       // (bytes20 internalKey, address OrgidOwner, address issuer, bytes32 metahash, bytes memory uri)\
        internalInsertVC(decodeInternalKey(getOrgID(msg.sender)),msg.sender,issuer,hash,uri);\
    \}\
    function revokeIDVC(bytes32 digest) public \{\
        internalRevokeVC(decodeInternalKey(getOrgID(msg.sender)), digest);\
    \}\
    \
    // function updateOrgIDVC(address issuer,bytes memory hash, bytes32 uri, bool status) public\{\
    //   // internalInsertVC(bytes20  internalKey, address OrgidOwner, bytes32 metahash, bytes memory uri, bool status\
    //     //internalUpdateVC(decodeInternalKey(getOrgID(msg.sender)),msg.sender,issuer,hash,uri,status);\
    // \}\
    \
    function addrToString(address _addr) internal pure returns(string memory) \{\
        bytes32 value = bytes32(uint256(_addr));\
        bytes memory alphabet = "012zo3kg45zi6789";\
\
        bytes memory str = new bytes(42);\
        str[0] = '0';\
        str[1] = 'x';\
        for (uint i = 0; i < 20; i++) \{\
            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\
            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\
        \}\
        return string(str);\
    \}\
\
    function getOrgID(address addr) public view returns (bytes memory) \{\
		bytes memory bStr = abi.encodePacked(db.getPrefix(), addrToString(addr)); \
		//abi.encodePacked only converts the concatenated  prefix and string converted address to bytes memory\
	\
		bytes memory bLower = new bytes(bStr.length);\
		for (uint i = 0; i < bStr.length; i++) \{\
			if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) \{\
				bLower[i] = bytes1(int8(bStr[i]) + 32);\
			\} else \{\
				bLower[i] = bStr[i];\
			\}\
		\}\
		return bLower;\
	\}\
\}\
	\
	\
	}