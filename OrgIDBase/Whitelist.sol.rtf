{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.6.0;\
\
\
import "./OnlyOwner.sol";\
\
\
/**\
 * @title Whitelist\
 * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\
 * @dev This simplifies the implementation of "user permissions".\
 */\
contract Whitelist is OnlyOwner \{\
  mapping(address => bool) public whitelist;\
 \
  event WhitelistedAddressAdded(address addr);\
  event WhitelistedAddressRemoved(address addr);\
\
  /**\
   * @dev Throws if called by any account that's not whitelisted.\
   */\
  modifier onlyWhitelisted() \{\
    require(whitelist[msg.sender]);\
    _;\
  \}\
\
  /**\
   * @dev add an address to the whitelist\
   * @param addr address\
   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\
   */\
  \
  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) \{\
    if (!whitelist[addr]) \{\
      whitelist[addr] = true;\
      emit WhitelistedAddressAdded(addr);\
      success = true;\
    \}\
  \}\
\
  /**\
   * @dev add addresses to the whitelist\
   * @param addrs addresses\
   * @return true if at least one address was added to the whitelist,\
   * false if all addresses were already in the whitelist\
   */\
  function addAddressesToWhitelist(address[] memory addrs) onlyOwner public returns(bool success) \{\
    for (uint256 i = 0; i < addrs.length; i++) \{\
      if (addAddressToWhitelist(addrs[i])) \{\
        success = true;\
      \}\
    \}\
  \}\
\
  /**\
   * @dev remove an address from the whitelist\
   * @param addr address\
   * @return true if the address was removed from the whitelist,\
   * false if the address wasn't in the whitelist in the first place\
   */\
  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) \{\
    if (whitelist[addr]) \{\
      whitelist[addr] = false;\
      emit WhitelistedAddressRemoved(addr);\
      success = true;\
    \}\
  \}\
\
  /**\
   * @dev remove addresses from the whitelist\
   * @param addrs addresses\
   * @return true if at least one address was removed from the whitelist,\
   * false if all addresses weren't in the whitelist in the first place\
   */\
  function removeAddressesFromWhitelist(address[] memory addrs) onlyOwner public returns(bool success) \{\
    for (uint256 i = 0; i < addrs.length; i++) \{\
      if (removeAddressFromWhitelist(addrs[i])) \{\
        success = true;\
      \}\
    \}\
  \}\
\
\}}