{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.6.0;\
\
import './IFOrgID.sol';\
import './OrgIDStorage.sol';\
import './OrgIDVC.sol';\
import './OnlyOwner.sol';\
import "./OrgIDrevokeregistry.sol";\
\
// DIDBase is an abstract contract which implements IDID\
\
contract OrgIDBase is IFOrgID, OnlyOwner  \{\
     OrgIDStorage public db;\
     OrgIDVC public vCdb;\
     OrgIDrevokeregistry public revokeregistry;\
    constructor(address dbAddr, address revokeAddr, bytes memory prefix) public \{\
        if (dbAddr == address(0x0)) \{\
            db = new OrgIDStorage(prefix);\
            vCdb=new OrgIDVC();\
             revokeregistry = new OrgIDrevokeregistry();\
            \
            emit PrefixAdded(prefix);\
            \
        \} else \{\
            db = OrgIDStorage(dbAddr);\
             vCdb= OrgIDVC(dbAddr);\
            require(keccak256(prefix) == keccak256(db.getPrefix()));\
            revokeregistry = OrgIDrevokeregistry(revokeAddr);\
        \}\
        \
    \}\
    \
    function transferDBOwnership(address newOwner) public onlyOwner \{\
        db.transferOwnership(newOwner);\
    \}\
    \
    \
    function hasPrefix(bytes memory _bytes, bytes memory _prefix) internal pure returns (bool) \{\
        if (_bytes.length <= _prefix.length) \{\
            return false;\
        \}\
        for (uint i = 0; i < _prefix.length; i++) \{\
            if (_prefix[i] != _bytes[i]) \{\
                return false;\
            \}\
        \}\
        return true;\
    \}\
    \
    /*\
    0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\
    0x5b38da6a701c768565dcfcb03fcb875f76beddc4307833697a34377a6b7a67303136336b34336f333736393669307a39366934673339336b69383737366f\
    */\
    \
    function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) \{\
        require(_bytes.length >= _start, "Read out of bounds");\
        uint256 _length = _bytes.length - _start;\
        bytes memory tempBytes;\
\
        assembly \{\
            switch iszero(_length)\
            case 0 \{\
                // Get a location of some free memory and store it in tempBytes as\
                // Solidity does for memory variables.\
                tempBytes := mload(0x40)\
\
                // The first word of the slice result is potentially a partial\
                // word read from the original array. To read it, we calculate\
                // the length of that partial word and start copying that many\
                // bytes into the array. The first word we copy will start with\
                // data we don't care about, but the last `lengthmod` bytes will\
                // land at the beginning of the contents of the new array. When\
                // we're done copying, we overwrite the full first word with\
                // the actual length of the slice.\
                \
                \
                let lengthmod := and(_length, 31)\
\
                // The multiplication in the next line is necessary\
                // because when slicing multiples of 32 bytes (lengthmod == 0)\
                // the following copy loop was copying the origin's length\
                // and then ending prematurely not copying everything it should.\
                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\
                let end := add(mc, _length)\
\
                for \{\
                    // The multiplication in the next line has the same exact purpose\
                    // as the one above.\
                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\
                \} lt(mc, end) \{\
                    mc := add(mc, 0x20)\
                    cc := add(cc, 0x20)\
                \} \{\
                    mstore(mc, mload(cc))\
                \}\
\
                mstore(tempBytes, _length)\
\
                //update free-memory pointer\
                //allocating the array padded to 32 bytes like the compiler does now\
                mstore(0x40, and(add(mc, 31), not(31)))\
            \}\
            //if we want a zero-length slice let's just return a zero-length array\
            default \{\
                tempBytes := mload(0x40)\
\
                mstore(0x40, add(tempBytes, 0x20))\
            \}\
        \}\
\
        return tempBytes;\
    \}\
    function decodeInternalKey(bytes memory Orgid) public view returns (bytes20);\
\
    function getHash(bytes memory _Orgid) public view returns (bytes32) \{\
        bytes20 internalKey = decodeInternalKey(_Orgid);\
        require(db.exist(internalKey), "OrgID does not exist");\
        (,bytes32 h,) = db.get(internalKey);\
        return h;\
    \}\
\
    function getURI(bytes memory Orgid) public view returns (bytes32) \{\
        bytes20 internalKey = decodeInternalKey(Orgid);\
        require(db.exist(internalKey), "OrgID does not exist");\
        (, , bytes32 URI) = db.get(internalKey);\
        return URI;\
    \}\
\
    function getOwner(bytes memory Orgid) public view returns (address) \{\
        bytes20 internalKey = decodeInternalKey(Orgid);\
        require(db.exist(internalKey), "OrgID does not exist");\
        (address owner, ,) = db.get(internalKey);\
        return owner;\
    \}\
    function getClaimURI(bytes memory Orgid,bytes32 digest, address subject) public view returns(bytes32)\{\
          bytes20 internalKey = decodeInternalKey(Orgid);\
          require(vCdb.exist(internalKey,digest), "Claim does not exist");\
           (address ownerAddr ,address issuer,,bytes32 uri) = vCdb.get(internalKey,digest); //only OrgidOwner or issuer is allowed to revoke OrgID VC \
          if((ownerAddr == subject || ownerAddr == issuer ) && (!revokeregistry.revoked(subject,digest))) \{ \
              return uri;\
              //Include condition for whitelist subjects .. modify whitelist data structure\
          \}\
    \}\
    \
   // VRC contract\
    function getmetaHash(bytes memory Orgid, bytes32 digest) public view returns (bytes memory ) \{\
        bytes20 internalKey = getInternalVCKey(Orgid);\
        require(vCdb.exist(internalKey,digest), "Claim does not exist");\
        require(revokeregistry.revoked(msg.sender,digest),"Claim has been revoked");\
        (,,bytes memory metahash,) = vCdb.get(internalKey,digest);\
        return metahash;\
    \}\
\
    function getVCURI(bytes memory Orgid, bytes32 digest) public view returns (bytes32) \{\
        bytes20 internalKey = getInternalVCKey(Orgid);\
        require(vCdb.exist(internalKey,digest), "Claim does not exist");\
         require(revokeregistry.revoked(msg.sender,digest),"Claim has been revoked");\
        (,, ,bytes32 uri) = vCdb.get(internalKey,digest);\
        return uri;\
    \}\
    function getVCSubject(bytes memory Orgid,bytes32 digest) public view returns (address) \{\
          bytes20 internalKey = getInternalVCKey(Orgid);\
          require(vCdb.exist(internalKey,digest), "Claim does not exist");\
           require(revokeregistry.revoked(msg.sender,digest),"Claim has been revoked");\
          (address subject,,,) = vCdb.get(internalKey,digest);\
        return subject;\
    \}\
    \
    function getVCIssuer(bytes memory Orgid,bytes32 digest) public view returns (address)\{\
        bytes20 internalKey = getInternalVCKey(Orgid);\
        require(vCdb.exist(internalKey,digest), "VC does not exist");\
        require(revokeregistry.revoked(msg.sender,digest),"Claim has been revoked");\
        (,  address issuer,,) = vCdb.get(internalKey,digest);\
        return issuer;\
    \}\
    \
    \
    // function decodeInternalVCKey(bytes memory Orgid) public  view returns (bytes20) \{\
     \
    //     require(hasPrefix(Orgid, db.getPrefix()), "Ohhh invalid Orgid");\
    //     bytes memory domainID = (slice(Orgid, db.getPrefix().length));\
    //     require(domainID.length == 42 && domainID[0] == '0' && domainID[1] == 'x', "Nope invalid OrgID"); //if it doesnot have prefix 0x its not \
    //     uint160 iaddr = 0;\
    //     uint160 b1;\
    //     uint160 b2;\
    //     for (uint i=2; i<2+2*20; i+=2)\{\
    //         iaddr *= 256;\
    //         b1 = uint8(domainID[i]);\
    //         b2 = uint8(domainID[i+1]);\
    //         if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\
    //         else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\
    //         if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\
    //         else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\
    //         iaddr += (b1*16+b2);\
    //     \}\
    //     return bytes20(iaddr);\
    // \}\
    function getInternalVCKey(bytes memory Orgid) internal view returns(bytes20)\{\
         bytes20  internalkey=decodeInternalKey(Orgid);\
         return internalkey;\
    \}\
\}}